/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package pt.omst.backseat;

import pt.lsts.imc.DesiredSpeed;
import pt.lsts.imc.DesiredZ;
import pt.lsts.imc.FollowRefState;
import pt.lsts.imc.FollowReference;
import pt.lsts.imc.Reference;
import pt.lsts.imc.VehicleCommand;
import pt.lsts.imc.net.Consume;
import pt.lsts.imc.net.IMCProtocol;

public class App {

    private static final int SOURCE_ID = 0XEEEE;
    private static final int SOURCE_ENT = 1;
    private static final String VEHICLE_NAME = "lauv-simulator-1";

    private IMCProtocol proto;

    public App() {
        proto = new IMCProtocol("backseat", 6006, SOURCE_ID);
        proto.register(this);
        proto.connect(VEHICLE_NAME);
        System.out.println("Waiting for "+VEHICLE_NAME+" to be available...");
        proto.waitFor(VEHICLE_NAME, 60_000);
        System.out.println("Vehicle is available!");
        startFollowReference(proto);
        System.out.println("Started follow reference!");
    }

    private void startFollowReference(IMCProtocol proto) {
        FollowReference cmd = new FollowReference();
        cmd.setControlSrc(SOURCE_ID);
        cmd.setControlEnt((short)0xFF);
        cmd.setLoiterRadius(10);
        cmd.setTimeout(10);

        VehicleCommand vc = new VehicleCommand();
        vc.setManeuver(cmd);
        vc.setCommand(VehicleCommand.COMMAND.EXEC_MANEUVER);
        vc.setSrc(SOURCE_ID);
        vc.setSrcEnt((short)SOURCE_ENT);

        proto.sendMessage(VEHICLE_NAME, vc);
    }

    private Reference endManeuver() {
        Reference ref = new Reference();
        ref.setFlags(Reference.FLAG_MANDONE);
        proto.sendMessage(VEHICLE_NAME, ref);
        System.out.println("Maneuver done!");
        return ref;
    }

    @Consume
    public void onFollowReferenceState(FollowRefState msg) {
        System.out.println("Received state: "+msg);
        if ((msg.getProximity() & FollowRefState.PROX_XY_NEAR) != 0)
            endManeuver();
        else
            guide(41.183, -8.705, 1, 0);
    }

    private Reference guide(double latDegrees, double lonDegrees, double speed, double depth) {
        Reference ref = new Reference();
        DesiredZ z = new DesiredZ();
        z.setValue(depth);
        z.setZUnits(DesiredZ.Z_UNITS.DEPTH);
        
        DesiredSpeed s = new DesiredSpeed();
        s.setValue(speed);
        s.setSpeedUnits(DesiredSpeed.SPEED_UNITS.METERS_PS);

        ref.setLat(Math.toRadians(latDegrees));
        ref.setLon(Math.toRadians(lonDegrees));
        ref.setFlags((short) (Reference.FLAG_LOCATION + Reference.FLAG_Z + Reference.FLAG_SPEED));
        proto.sendMessage(VEHICLE_NAME, ref);
        System.out.println("Going to "+Math.toDegrees(ref.getLat())+", "+Math.toDegrees(ref.getLon())+" at "+speed+" m/s and "+depth+" m depth");
        return ref;
    }

    public static void main(String[] args) {
       new App();        
    }
}
